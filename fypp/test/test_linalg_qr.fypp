#:include "common.fypp"
! Test QR factorization 
module test_linalg_qr
    use stdlib_linalg_interface

    implicit none (type,external)

    contains

    !> SVD tests
    subroutine test_qr(error)
        logical, intent(out) :: error

        real :: t0,t1

        call cpu_time(t0)

        #:for rk,rt,ri in ALL_KINDS_TYPES
        call test_qr_random_${ri}$(error)
        if (error) return
        #: endfor

        call cpu_time(t1)

        print 1, 1000*(t1-t0), merge('SUCCESS','ERROR  ',.not.error)

        1 format('QR tests completed in ',f9.4,' milliseconds, result=',a)

    end subroutine test_qr

    !> QR factorization of a random matrix
    #:for rk,rt,ri in ALL_KINDS_TYPES
    subroutine test_qr_random_${ri}$(error)
        logical,intent(out) :: error

        integer(ilp), parameter :: m = 15_ilp
        integer(ilp), parameter :: n =  4_ilp
        integer(ilp), parameter :: k = min(m,n)
        ${rt}$ :: a(m,n),q(m,m),r(m,n),qred(m,k),rred(k,n)
        real(${rk}$) :: rea(m,n),ima(m,n)
        type(linalg_state) :: err
        
        call random_number(rea)
        #:if rt.startswith('complex')
        call random_number(ima)
        a = cmplx(rea,ima,kind=${rk}$)
        #:else
        a = rea
        #:endif
        
        ! 1) QR factorization with full matrices
        call qr(a,q,r,err=err)
        print *, 'full, err=',err%print()
        
        ! Check return code
        error = err%error()
        if (error) return
        
        ! Check solution
        print *, 'epsilon=',epsilon(0.0_${rk}$),' within bounds=', &
        count(abs(a-matmul(q,r))<sqrt(epsilon(0.0_${rk}$))),' out of ',m*n
        error = .not. all(abs(a-matmul(q,r))<sqrt(epsilon(0.0_${rk}$)))
        if (error) return
        
        ! 2) QR factorization with reduced matrices
        call qr(a,qred,rred,err=err)
        print *, 'reduced, err=',err%print()
        
        ! Check return code
        error = err%error()
        if (error) return
        
        print *, 'epsilon=',epsilon(0.0_${rk}$),' within bounds=', &
        count(abs(a-matmul(qred,rred))<sqrt(epsilon(0.0_${rk}$))),' out of ',m*n        
        
        ! Check solution
        error = .not. all(abs(a-matmul(qred,rred))<sqrt(epsilon(0.0_${rk}$)))
        
        if (error) return    
    
        
    end subroutine test_qr_random_${ri}$

    #:endfor


end module test_linalg_qr


