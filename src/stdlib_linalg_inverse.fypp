#:set REAL_KINDS    = ["sp", "dp", "qp"]
#:set REAL_INITIALS = ["s","d","q"]
#:set REAL_TYPES    = ["real({})".format(k) for k in REAL_KINDS]
#:set REAL_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_INITIALS))
#:set CMPL_INITIALS = ["c","z","w"]
#:set CMPL_TYPES    = ["complex({})".format(k) for k in REAL_KINDS]
#:set CMPL_KINDS_TYPES = list(zip(REAL_KINDS, CMPL_TYPES, CMPL_INITIALS))
#:set ALL_KINDS_TYPES = list(zip(REAL_KINDS+REAL_KINDS,REAL_TYPES+CMPL_TYPES,REAL_INITIALS+CMPL_INITIALS))

#:set RANK_SUFFIX = ["_one","_multiple"]
#:set RANK_SYMBOL = [":",":,:"]
#:set ALL_RANKS = list(zip(RANK_SYMBOL,RANK_SUFFIX))
! Compute matrix inverse
module stdlib_linalg_inverse
     use stdlib_linalg_constants
     use stdlib_linalg_blas
     use stdlib_linalg_lapack
     use stdlib_linalg_state
     use iso_fortran_env,only:real32,real64,real128,int8,int16,int32,int64,stderr => error_unit
     implicit none(type,external)
     private

     !> Function interface return the matrix inverse
     public :: inv
     !> Subroutine interface: invert matrix inplace
     public :: invert

     ! Numpy: inv(a)
     ! Scipy: inv(a, overwrite_a=False, check_finite=True)
     ! IMSL: lu_solve(a, b, transpose=False)

     ! Function interface
     interface inv
        #:for rk,rt,ri in ALL_KINDS_TYPES
        module procedure stdlib_linalg_inverse_${ri}$
        #:endfor
     end interface inv

     ! Subroutine interface: in-place factorization
     interface invert
        #:for rk,rt,ri in ALL_KINDS_TYPES
        module procedure stdlib_linalg_invert_${ri}$
        #:endfor
     end interface invert


     contains

     #:for rk,rt,ri in ALL_KINDS_TYPES

     ! Compute the in-place square matrix inverse of a
     subroutine stdlib_linalg_invert_${ri}$(a,err)
         !> Input matrix a[n,n]
         ${rt}$,                     intent(inout) :: a(:,:)
         !> [optional] state return flag. On error if not requested, the code will stop
         type(linalg_state), optional, intent(out) :: err

         !> Local variables
         type(linalg_state) :: err0
         integer(ilp) :: lda,n,info,nb,lwork
         integer(ilp), allocatable :: ipiv(:)
         ${rt}$, allocatable :: work(:)
         character(*), parameter :: this = 'invert'

         !> Problem sizes
         lda  = size(a,1,kind=ilp)
         n    = size(a,2,kind=ilp)

         if (lda<1 .or. n<1 .or. lda/=n) then
            err0 = linalg_state(this,LINALG_VALUE_ERROR,'invalid matrix size: a=[',lda,',',n,']')
            goto 1
         end if

         ! Pivot indices
         allocate(ipiv(n))

         ! Factorize matrix (overwrite result)
         call getrf(lda,n,a,lda,ipiv,info)

         ! Return codes from getrf and getri are identical
         if (info==0) then

            ! Get optimal worksize (returned in work(1)) (apply 2% safety parameter)
            nb = stdlib_ilaenv(1,'${ri}$getri',' ',n,-1,-1,-1)
            lwork = nint(1.02*n*nb,kind=ilp)

            allocate(work(lwork))

            ! Invert matrix
            call getri(n,a,lda,ipiv,work,lwork,info)

         endif

         select case (info)
            case (0)
                ! Success
            case (:-1)
                err0 = linalg_state(this,LINALG_ERROR,'invalid matrix size a=[',lda,',',n,']')
            case (1:)
                ! Matrix is singular
                err0 = linalg_state(this,LINALG_ERROR,'singular matrix')
            case default
                err0 = linalg_state(this,LINALG_INTERNAL_ERROR,'catastrophic error')
         end select

         ! Process output and return
         1 call linalg_error_handling(err0,err)

     end subroutine stdlib_linalg_invert_${ri}$

     ! Compute
     function stdlib_linalg_inverse_${ri}$(a,err) result(inva)
         !> Input matrix a[n,n]
         ${rt}$, intent(in) :: a(:,:)
         !> Output matrix inverse
         ${rt}$, allocatable :: inva(:,:)
         !> [optional] state return flag. On error if not requested, the code will stop
         type(linalg_state), optional, intent(out) :: err

         !> Allocate with copy
         allocate(inva,source=a)

         !> Compute matrix inverse
         call stdlib_linalg_invert_${ri}$(inva,err)

     end function stdlib_linalg_inverse_${ri}$

     #:endfor

end module stdlib_linalg_inverse
